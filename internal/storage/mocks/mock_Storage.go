// Code generated by mockery v2.43.2. DO NOT EDIT.

package storage

import (
	context "context"

	storage "github.com/kirilltitov/gophkeeper/internal/storage"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// AddTag provides a mock function with given fields: ctx, secretID, tag
func (_m *MockStorage) AddTag(ctx context.Context, secretID uuid.UUID, tag string) error {
	ret := _m.Called(ctx, secretID, tag)

	if len(ret) == 0 {
		panic("no return value specified for AddTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, secretID, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_AddTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTag'
type MockStorage_AddTag_Call struct {
	*mock.Call
}

// AddTag is a helper method to define mock.On call
//   - ctx context.Context
//   - secretID uuid.UUID
//   - tag string
func (_e *MockStorage_Expecter) AddTag(ctx interface{}, secretID interface{}, tag interface{}) *MockStorage_AddTag_Call {
	return &MockStorage_AddTag_Call{Call: _e.mock.On("AddTag", ctx, secretID, tag)}
}

func (_c *MockStorage_AddTag_Call) Run(run func(ctx context.Context, secretID uuid.UUID, tag string)) *MockStorage_AddTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockStorage_AddTag_Call) Return(_a0 error) *MockStorage_AddTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_AddTag_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *MockStorage_AddTag_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockStorage) Close() {
	_m.Called()
}

// MockStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Close() *MockStorage_Close_Call {
	return &MockStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorage_Close_Call) Run(run func()) *MockStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Close_Call) Return() *MockStorage_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStorage_Close_Call) RunAndReturn(run func()) *MockStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSecret provides a mock function with given fields: ctx, secret
func (_m *MockStorage) CreateSecret(ctx context.Context, secret *storage.Secret) error {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *storage.Secret) error); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_CreateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecret'
type MockStorage_CreateSecret_Call struct {
	*mock.Call
}

// CreateSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - secret *storage.Secret
func (_e *MockStorage_Expecter) CreateSecret(ctx interface{}, secret interface{}) *MockStorage_CreateSecret_Call {
	return &MockStorage_CreateSecret_Call{Call: _e.mock.On("CreateSecret", ctx, secret)}
}

func (_c *MockStorage_CreateSecret_Call) Run(run func(ctx context.Context, secret *storage.Secret)) *MockStorage_CreateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*storage.Secret))
	})
	return _c
}

func (_c *MockStorage_CreateSecret_Call) Return(_a0 error) *MockStorage_CreateSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_CreateSecret_Call) RunAndReturn(run func(context.Context, *storage.Secret) error) *MockStorage_CreateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockStorage) CreateUser(ctx context.Context, user storage.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user storage.User
func (_e *MockStorage_Expecter) CreateUser(ctx interface{}, user interface{}) *MockStorage_CreateUser_Call {
	return &MockStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockStorage_CreateUser_Call) Run(run func(ctx context.Context, user storage.User)) *MockStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User))
	})
	return _c
}

func (_c *MockStorage_CreateUser_Call) Return(_a0 error) *MockStorage_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_CreateUser_Call) RunAndReturn(run func(context.Context, storage.User) error) *MockStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTag provides a mock function with given fields: ctx, secretID, tag
func (_m *MockStorage) DeleteTag(ctx context.Context, secretID uuid.UUID, tag string) error {
	ret := _m.Called(ctx, secretID, tag)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, secretID, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_DeleteTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTag'
type MockStorage_DeleteTag_Call struct {
	*mock.Call
}

// DeleteTag is a helper method to define mock.On call
//   - ctx context.Context
//   - secretID uuid.UUID
//   - tag string
func (_e *MockStorage_Expecter) DeleteTag(ctx interface{}, secretID interface{}, tag interface{}) *MockStorage_DeleteTag_Call {
	return &MockStorage_DeleteTag_Call{Call: _e.mock.On("DeleteTag", ctx, secretID, tag)}
}

func (_c *MockStorage_DeleteTag_Call) Run(run func(ctx context.Context, secretID uuid.UUID, tag string)) *MockStorage_DeleteTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockStorage_DeleteTag_Call) Return(_a0 error) *MockStorage_DeleteTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_DeleteTag_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *MockStorage_DeleteTag_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSecret provides a mock function with given fields: ctx, userID, name
func (_m *MockStorage) LoadSecret(ctx context.Context, userID uuid.UUID, name string) (*storage.Secret, error) {
	ret := _m.Called(ctx, userID, name)

	if len(ret) == 0 {
		panic("no return value specified for LoadSecret")
	}

	var r0 *storage.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*storage.Secret, error)); ok {
		return rf(ctx, userID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *storage.Secret); ok {
		r0 = rf(ctx, userID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_LoadSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSecret'
type MockStorage_LoadSecret_Call struct {
	*mock.Call
}

// LoadSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - name string
func (_e *MockStorage_Expecter) LoadSecret(ctx interface{}, userID interface{}, name interface{}) *MockStorage_LoadSecret_Call {
	return &MockStorage_LoadSecret_Call{Call: _e.mock.On("LoadSecret", ctx, userID, name)}
}

func (_c *MockStorage_LoadSecret_Call) Run(run func(ctx context.Context, userID uuid.UUID, name string)) *MockStorage_LoadSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockStorage_LoadSecret_Call) Return(_a0 *storage.Secret, _a1 error) *MockStorage_LoadSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_LoadSecret_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*storage.Secret, error)) *MockStorage_LoadSecret_Call {
	_c.Call.Return(run)
	return _c
}

// LoadSecrets provides a mock function with given fields: ctx, user
func (_m *MockStorage) LoadSecrets(ctx context.Context, user storage.User) (*[]storage.Secret, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for LoadSecrets")
	}

	var r0 *[]storage.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) (*[]storage.Secret, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) *[]storage.Secret); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]storage.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_LoadSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadSecrets'
type MockStorage_LoadSecrets_Call struct {
	*mock.Call
}

// LoadSecrets is a helper method to define mock.On call
//   - ctx context.Context
//   - user storage.User
func (_e *MockStorage_Expecter) LoadSecrets(ctx interface{}, user interface{}) *MockStorage_LoadSecrets_Call {
	return &MockStorage_LoadSecrets_Call{Call: _e.mock.On("LoadSecrets", ctx, user)}
}

func (_c *MockStorage_LoadSecrets_Call) Run(run func(ctx context.Context, user storage.User)) *MockStorage_LoadSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User))
	})
	return _c
}

func (_c *MockStorage_LoadSecrets_Call) Return(_a0 *[]storage.Secret, _a1 error) *MockStorage_LoadSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_LoadSecrets_Call) RunAndReturn(run func(context.Context, storage.User) (*[]storage.Secret, error)) *MockStorage_LoadSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// LoadUser provides a mock function with given fields: ctx, login
func (_m *MockStorage) LoadUser(ctx context.Context, login string) (*storage.User, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for LoadUser")
	}

	var r0 *storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*storage.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *storage.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_LoadUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadUser'
type MockStorage_LoadUser_Call struct {
	*mock.Call
}

// LoadUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *MockStorage_Expecter) LoadUser(ctx interface{}, login interface{}) *MockStorage_LoadUser_Call {
	return &MockStorage_LoadUser_Call{Call: _e.mock.On("LoadUser", ctx, login)}
}

func (_c *MockStorage_LoadUser_Call) Run(run func(ctx context.Context, login string)) *MockStorage_LoadUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_LoadUser_Call) Return(_a0 *storage.User, _a1 error) *MockStorage_LoadUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_LoadUser_Call) RunAndReturn(run func(context.Context, string) (*storage.User, error)) *MockStorage_LoadUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
